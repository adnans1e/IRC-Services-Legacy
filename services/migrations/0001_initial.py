# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2019-04-03 20:28
from __future__ import unicode_literals

import ckeditor.fields
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import services.models
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('regions', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('email', 'Email'), ('phone', 'Phone'), ('viber', 'Viber'), ('whatsapp', 'Whatsapp'), ('skype', 'Skype'), ('facebook_messenger', 'Facebook Messenger'), ('instagram', 'Instagram')], default=None, max_length=20, null=True)),
                ('text', models.CharField(max_length=256)),
                ('name', models.CharField(blank=True, max_length=10, null=True)),
                ('title', models.CharField(blank=True, max_length=20, null=True)),
                ('index', models.SmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone Number')),
                ('delivered', models.NullBooleanField(default=False, help_text='Was service delivered?')),
                ('quality', models.SmallIntegerField(blank=True, default=None, help_text='How would you rate the quality of the service you received (from 1 to 5, where 5 is the highest rating possible)?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('non_delivery_explained', models.CharField(blank=True, choices=[('no', 'No explanation'), ('unclear', 'Explanation was not clear'), ('unfair', 'Explanation was not fair'), ('yes', 'Clear and appropriate explanation')], default=None, help_text='Did you receive a clear explanation for why the service you sought was not delivered to you?', max_length=8, null=True)),
                ('wait_time', models.CharField(blank=True, choices=[('lesshour', 'Less than 1 hour'), ('uptotwodays', 'Up to 2 days'), ('3-7days', '3-7 days'), ('1-2weeks', '1-2 weeks'), ('more', 'More than 2 weeks')], default=None, help_text='How long did you wait for the service to be delivered, after contacting the service provider?', max_length=12, null=True)),
                ('wait_time_satisfaction', models.SmallIntegerField(blank=True, default=None, help_text='How do you rate your satisfaction with the time that you waited for the service to be delivered (from 1 to 5, where 5 is the highest rating possible)?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('difficulty_contacting', models.CharField(choices=[('no', 'No'), ('didntknow', 'Did not know how to contact them'), ('nophoneresponse', 'Tried to contact them by phone but received no response'), ('noresponse', 'Tried to contact them in person but received no response or did not find their office'), ('unhelpful', 'Contacted them but response was unhelpful'), ('other', 'Other')], help_text='Did you experience difficulties contacting the provider of the service you needed?', max_length=20)),
                ('other_difficulties', models.TextField(blank=True, default='', help_text='Other difficulties contacting the service provider')),
                ('staff_satisfaction', models.SmallIntegerField(blank=True, default=None, help_text='How would you rate your satisfaction with the staff of the organization that provided services to you, (from 1 to 5, where 5 is the highest rating possible)?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('extra_comments', models.TextField(blank=True, default='', help_text='Other comments')),
                ('anonymous', models.BooleanField(default=False, help_text='I want my feedback to be anonymous to the service provider')),
            ],
        ),
        migrations.CreateModel(
            name='JiraUpdateRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_type', models.CharField(choices=[('provider-change', 'Provider updated their information'), ('new-service', 'New service submitted by provider'), ('change-service', 'Change to existing service submitted by provider'), ('cancel-draft-service', 'Provider canceled a draft service'), ('cancel-current-service', 'Provider canceled a current service'), ('superseded-draft', 'Provider superseded a previous draft'), ('approve-service', 'Staff approved a new or changed service'), ('rejected-service', 'Staff rejected a new or changed service'), ('feedback', 'User submitted feedback'), ('request-for-service', 'User submitted request for service.')], max_length=22, verbose_name='update type')),
                ('jira_issue_key', models.CharField(blank=True, default='', max_length=256, verbose_name='JIRA issue')),
                ('by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('feedback', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jira_records', to='services.Feedback')),
            ],
        ),
        migrations.CreateModel(
            name='Nationality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(unique=True)),
                ('name_en', models.CharField(blank=True, default='', max_length=256, verbose_name='name in English')),
                ('name_ar', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Arabic')),
                ('name_fa', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Persian')),
                ('name_fr', models.CharField(blank=True, default='', max_length=256, verbose_name='name in French')),
                ('name_de', models.CharField(blank=True, default='', max_length=256, verbose_name='name in German')),
                ('name_el', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Greek')),
                ('name_ur', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Urdu')),
                ('name_es', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Spanish')),
                ('name_ti', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Tigrinya')),
            ],
            options={
                'verbose_name_plural': 'nationalities',
            },
        ),
        migrations.CreateModel(
            name='NewsletterEmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
                ('value', ckeditor.fields.RichTextField(blank=True)),
                ('type', models.CharField(choices=[('service_base', 'service_base'), ('service_confirmation', 'service_base'), ('service_reminder', 'service_base'), ('service_thanks', 'service_base')], default='service_base', max_length=20, verbose_name='type')),
                ('order', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_name', models.CharField(blank=True, default='', max_length=255, verbose_name='contact_name')),
                ('title', models.CharField(blank=True, default='', max_length=255, verbose_name='title')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('website', models.CharField(blank=True, default='', max_length=255, verbose_name='website')),
                ('number_of_monthly_beneficiaries', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)], verbose_name='number of targeted beneficiaries monthly')),
                ('focal_point_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='focal point phone number')),
                ('is_frozen', models.BooleanField(default=False, verbose_name='is frozen')),
                ('facebook', models.CharField(blank=True, default='', max_length=255, verbose_name='facebook')),
                ('twitter', models.CharField(blank=True, default='', max_length=255, verbose_name='twitter')),
                ('meta_population', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='meta_population')),
                ('record', models.TextField(blank=True, default='', verbose_name='record')),
                ('requirement', models.TextField(blank=True, default='', verbose_name='requirement')),
                ('vacancy', models.BooleanField(default=False, verbose_name='vacancy')),
                ('additional_info', models.TextField(blank=True, default='', verbose_name='additional_info')),
                ('address_en', models.TextField(blank=True, default='', verbose_name='provider address in English')),
                ('address_ar', models.TextField(blank=True, default='', verbose_name='provider address in Arabic')),
                ('address_fa', models.TextField(blank=True, default='', verbose_name='provider address in Persian')),
                ('address_fr', models.TextField(blank=True, default='', verbose_name='provider address in French')),
                ('address_de', models.TextField(blank=True, default='', verbose_name='provider address in German')),
                ('address_el', models.TextField(blank=True, default='', verbose_name='provider address in Greek')),
                ('address_ur', models.TextField(blank=True, default='', verbose_name='provider address in Urdu')),
                ('address_es', models.TextField(blank=True, default='', verbose_name='provider address in Spanish')),
                ('address_ti', models.TextField(blank=True, default='', verbose_name='provider address in Tigrinya')),
                ('focal_point_name_en', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in English')),
                ('focal_point_name_ar', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in Arabic')),
                ('focal_point_name_fa', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in Persian')),
                ('focal_point_name_fr', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in French')),
                ('focal_point_name_de', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in German')),
                ('focal_point_name_el', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in Greek')),
                ('focal_point_name_ur', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in Urdu')),
                ('focal_point_name_es', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in Spanish')),
                ('focal_point_name_ti', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='focal point name in Tigrinya')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='description in English')),
                ('description_ar', models.TextField(blank=True, default='', verbose_name='description in Arabic')),
                ('description_fa', models.TextField(blank=True, default='', verbose_name='description in Persian')),
                ('description_fr', models.TextField(blank=True, default='', verbose_name='description in French')),
                ('description_de', models.TextField(blank=True, default='', verbose_name='description in German')),
                ('description_el', models.TextField(blank=True, default='', verbose_name='description in Greek')),
                ('description_ur', models.TextField(blank=True, default='', verbose_name='description in Urdu')),
                ('description_es', models.TextField(blank=True, default='', verbose_name='description in Spanish')),
                ('description_ti', models.TextField(blank=True, default='', verbose_name='description in Tigrinya')),
                ('name_en', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in English')),
                ('name_ar', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in Arabic')),
                ('name_fa', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in Persian')),
                ('name_fr', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in French')),
                ('name_de', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in German')),
                ('name_el', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in Greek')),
                ('name_ur', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in Urdu')),
                ('name_es', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in Spanish')),
                ('name_ti', models.CharField(blank=True, default='', max_length=256, validators=[services.models.blank_or_at_least_one_letter], verbose_name='Name in Tigrinya')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='providers', to='regions.GeographicRegion', verbose_name='Region')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProviderType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(null=True)),
                ('name_en', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in English')),
                ('name_ar', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Arabic')),
                ('name_fa', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Persian')),
                ('name_fr', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in French')),
                ('name_de', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in German')),
                ('name_el', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Greek')),
                ('name_ur', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Urdu')),
                ('name_es', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Spanish')),
                ('name_ti', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Tigrinya')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RequestForService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_name', models.CharField(max_length=256, validators=[services.models.at_least_one_letter])),
                ('service_name', models.CharField(max_length=256, validators=[services.models.at_least_one_letter])),
                ('address', models.TextField()),
                ('contact', models.TextField()),
                ('description', models.TextField()),
                ('rating', models.SmallIntegerField(blank=True, default=None, help_text='How would you rate the quality of the service you received (from 1 to 5, where 5 is the highest rating possible)?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
        ),
        migrations.CreateModel(
            name='SelectionCriterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_en', models.CharField(blank=True, default='', max_length=100)),
                ('text_ar', models.CharField(blank=True, default='', max_length=100)),
                ('text_fa', models.CharField(blank=True, default='', max_length=100)),
                ('text_fr', models.CharField(blank=True, default='', max_length=100)),
                ('text_de', models.CharField(blank=True, default='', max_length=100)),
                ('text_el', models.CharField(blank=True, default='', max_length=100)),
                ('text_ur', models.CharField(blank=True, default='', max_length=100)),
                ('text_es', models.CharField(blank=True, default='', max_length=100)),
                ('text_ti', models.CharField(blank=True, default='', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'selection criteria',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='This field has to be unique', max_length=512, null=True, unique=True)),
                ('address_in_country_language', models.TextField(blank=True, null=True, verbose_name='Address in country language')),
                ('cost_of_service', models.TextField(blank=True, default='', verbose_name='cost of service')),
                ('is_mobile', models.BooleanField(default=False, verbose_name='mobile service')),
                ('phone_number', models.CharField(blank=True, help_text='Use ISO phone numbers with no spaces, ex: +3815551234', max_length=40, null=True, verbose_name='phone number')),
                ('status', models.CharField(choices=[('draft', 'draft'), ('current', 'current'), ('rejected', 'rejected'), ('canceled', 'canceled'), ('archived', 'archived'), ('private', 'private')], default='draft', max_length=10, verbose_name='status')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='location')),
                ('sunday_open', models.TimeField(blank=True, null=True)),
                ('sunday_close', models.TimeField(blank=True, null=True)),
                ('monday_open', models.TimeField(blank=True, null=True)),
                ('monday_close', models.TimeField(blank=True, null=True)),
                ('tuesday_open', models.TimeField(blank=True, null=True)),
                ('tuesday_close', models.TimeField(blank=True, null=True)),
                ('wednesday_open', models.TimeField(blank=True, null=True)),
                ('wednesday_close', models.TimeField(blank=True, null=True)),
                ('thursday_open', models.TimeField(blank=True, null=True)),
                ('thursday_close', models.TimeField(blank=True, null=True)),
                ('friday_open', models.TimeField(blank=True, null=True)),
                ('friday_close', models.TimeField(blank=True, null=True)),
                ('saturday_open', models.TimeField(blank=True, null=True)),
                ('saturday_close', models.TimeField(blank=True, null=True)),
                ('opening_time', models.TextField(blank=True, null=True)),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, default='', help_text='Upload an image file (GIF, JPEG, PNG, WebP) with a square aspect ratio (Width equal to Height). The image size should be at least 1280 x 1280 for best results. SVG files are not supported.', upload_to='service-images/')),
                ('foreign_object_id', models.IntegerField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('facebook_page', models.CharField(blank=True, default='', max_length=255, verbose_name='Link to facebook page')),
                ('whatsapp', models.CharField(blank=True, default='', max_length=255, verbose_name='Whatsapp number')),
                ('website', models.CharField(blank=True, default='', max_length=255, verbose_name='website')),
                ('email', models.EmailField(blank=True, default='', max_length=255, verbose_name='email address')),
                ('focal_point_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('focal_point_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('focal_point_email', models.EmailField(blank=True, max_length=255, null=True)),
                ('focal_point_title', models.CharField(blank=True, max_length=255, null=True)),
                ('second_focal_point_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('second_focal_point_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('second_focal_point_email', models.EmailField(blank=True, max_length=255, null=True)),
                ('second_focal_point_title', models.CharField(blank=True, max_length=255, null=True)),
                ('confirmation_key', models.CharField(default='', max_length=255)),
                ('newsletter_valid_emails', models.CharField(default='', max_length=255)),
                ('exclude_from_confirmation', models.BooleanField(default=False)),
                ('additional_info_en', models.TextField(blank=True, default='', verbose_name='Additional information in English')),
                ('additional_info_ar', models.TextField(blank=True, default='', verbose_name='Additional information in Arabic')),
                ('additional_info_fa', models.TextField(blank=True, default='', verbose_name='Additional information in Persian')),
                ('additional_info_fr', models.TextField(blank=True, default='', verbose_name='Additional information in French')),
                ('additional_info_de', models.TextField(blank=True, default='', verbose_name='Additional information in German')),
                ('additional_info_el', models.TextField(blank=True, default='', verbose_name='Additional information in Greek')),
                ('additional_info_ur', models.TextField(blank=True, default='', verbose_name='Additional information in Urdu')),
                ('additional_info_es', models.TextField(blank=True, default='', verbose_name='Additional information in Spanish')),
                ('additional_info_ti', models.TextField(blank=True, default='', verbose_name='Additional information in Tigrinya')),
                ('address_city_en', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in English')),
                ('address_city_ar', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in Arabic')),
                ('address_city_fa', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in Persian')),
                ('address_city_fr', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in French')),
                ('address_city_de', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in German')),
                ('address_city_el', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in Greek')),
                ('address_city_ur', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in Urdu')),
                ('address_city_es', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in Spanish')),
                ('address_city_ti', models.TextField(blank=True, default='', null=True, verbose_name='Address (city) in Tigrinya')),
                ('name_en', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in English')),
                ('name_ar', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Arabic')),
                ('name_fa', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Persian')),
                ('name_fr', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in French')),
                ('name_de', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in German')),
                ('name_el', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Greek')),
                ('name_ur', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Urdu')),
                ('name_es', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Spanish')),
                ('name_ti', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Tigrinya')),
                ('address_en', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in English')),
                ('address_ar', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in Arabic')),
                ('address_fa', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in Persian')),
                ('address_fr', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in French')),
                ('address_de', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in German')),
                ('address_el', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in Greek')),
                ('address_ur', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in Urdu')),
                ('address_es', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in Spanish')),
                ('address_ti', models.TextField(blank=True, default='', null=True, verbose_name='Address (street) in Tigrinya')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description in English')),
                ('description_ar', models.TextField(blank=True, default='', verbose_name='Description in Arabic')),
                ('description_fa', models.TextField(blank=True, default='', verbose_name='Description in Persian')),
                ('description_fr', models.TextField(blank=True, default='', verbose_name='Description in French')),
                ('description_de', models.TextField(blank=True, default='', verbose_name='Description in German')),
                ('description_el', models.TextField(blank=True, default='', verbose_name='Description in Greek')),
                ('description_ur', models.TextField(blank=True, default='', verbose_name='Description in Urdu')),
                ('description_es', models.TextField(blank=True, default='', verbose_name='Description in Spanish')),
                ('description_ti', models.TextField(blank=True, default='', verbose_name='Description in Tigrinya')),
                ('languages_spoken_en', models.TextField(blank=True, default='', verbose_name='Languages spoken in English')),
                ('languages_spoken_ar', models.TextField(blank=True, default='', verbose_name='Languages spoken in Arabic')),
                ('languages_spoken_fa', models.TextField(blank=True, default='', verbose_name='Languages spoken in Persian')),
                ('languages_spoken_fr', models.TextField(blank=True, default='', verbose_name='Languages spoken in French')),
                ('languages_spoken_de', models.TextField(blank=True, default='', verbose_name='Languages spoken in German')),
                ('languages_spoken_el', models.TextField(blank=True, default='', verbose_name='Languages spoken in Greek')),
                ('languages_spoken_ur', models.TextField(blank=True, default='', verbose_name='Languages spoken in Urdu')),
                ('languages_spoken_es', models.TextField(blank=True, default='', verbose_name='Languages spoken in Spanish')),
                ('languages_spoken_ti', models.TextField(blank=True, default='', verbose_name='Languages spoken in Tigrinya')),
                ('address_floor_en', models.TextField(blank=True, null=True)),
                ('address_floor_ar', models.TextField(blank=True, null=True)),
                ('address_floor_fa', models.TextField(blank=True, null=True)),
                ('address_floor_fr', models.TextField(blank=True, null=True)),
                ('address_floor_de', models.TextField(blank=True, null=True)),
                ('address_floor_el', models.TextField(blank=True, null=True)),
                ('address_floor_ur', models.TextField(blank=True, null=True)),
                ('address_floor_es', models.TextField(blank=True, null=True)),
                ('address_floor_ti', models.TextField(blank=True, null=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='services.Provider', verbose_name='provider')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='regions.GeographicRegion', verbose_name='area of service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_en', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in English')),
                ('name_ar', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Arabic')),
                ('name_fa', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Persian')),
                ('name_fr', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in French')),
                ('name_de', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in German')),
                ('name_el', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Greek')),
                ('name_ur', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Urdu')),
                ('name_es', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Spanish')),
                ('name_ti', models.CharField(blank=True, default='', max_length=256, verbose_name='Name in Tigrinya')),
                ('geographic_region', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='regions.GeographicRegion')),
                ('parent', models.ForeignKey(blank=True, help_text='the area that contains this area', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='services.ServiceArea', verbose_name='parent area')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceConfirmationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(blank=True, choices=[('confirmed', 'Confirmed'), ('pending', 'Pending'), ('pending_reminder', 'Pending after reminder'), ('pending_unconfirmed_reminder', 'Pending after unconfirmed reminder'), ('outdated', 'Service needs update'), ('error', 'Error occurred during email sending'), ('focal_point_added', 'Focal point added')], max_length=255, null=True)),
                ('sent_to', models.EmailField(blank=True, max_length=255, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirmation_logs', to='services.Service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='tag name')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True)),
                ('icon', models.ImageField(blank=True, upload_to='service-type-icons', verbose_name='icon')),
                ('icon_url', models.URLField(blank=True, null=True)),
                ('vector_icon', models.CharField(blank=True, max_length=100, null=True, verbose_name='Vector Icon')),
                ('color', models.CharField(blank=True, max_length=7)),
                ('comments_en', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in English')),
                ('comments_ar', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in Arabic')),
                ('comments_fa', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in Persian')),
                ('comments_fr', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in French')),
                ('comments_de', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in German')),
                ('comments_el', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in Greek')),
                ('comments_ur', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in Urdu')),
                ('comments_es', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in Spanish')),
                ('comments_ti', models.CharField(blank=True, default='', max_length=512, verbose_name='comments in Tigrinya')),
                ('name_en', models.CharField(blank=True, default='', max_length=256, verbose_name='name in English')),
                ('name_ar', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Arabic')),
                ('name_fa', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Persian')),
                ('name_fr', models.CharField(blank=True, default='', max_length=256, verbose_name='name in French')),
                ('name_de', models.CharField(blank=True, default='', max_length=256, verbose_name='name in German')),
                ('name_el', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Greek')),
                ('name_ur', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Urdu')),
                ('name_es', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Spanish')),
                ('name_ti', models.CharField(blank=True, default='', max_length=256, verbose_name='name in Tigrinya')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='TypesOrdering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField()),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='regions.GeographicRegion')),
                ('service_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.ServiceType')),
            ],
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('note', models.TextField()),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service', to='services.Service', verbose_name='Service')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='servicetype',
            name='ordering',
            field=models.ManyToManyField(blank=True, through='services.TypesOrdering', to='regions.GeographicRegion', verbose_name='ordering'),
        ),
        migrations.AddField(
            model_name='service',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Specific tags for this service.', to='services.ServiceTag', verbose_name='service tags'),
        ),
        migrations.AddField(
            model_name='service',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_type', to='services.ServiceType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='service',
            name='types',
            field=models.ManyToManyField(blank=True, to='services.ServiceType', verbose_name='types'),
        ),
        migrations.AddField(
            model_name='service',
            name='update_of',
            field=models.ForeignKey(blank=True, help_text='If a service record represents a modification of another service record, this field links to that other record.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='services.Service'),
        ),
        migrations.AddField(
            model_name='selectioncriterion',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selection_criteria', to='services.Service'),
        ),
        migrations.AddField(
            model_name='requestforservice',
            name='area_of_service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.ServiceArea', verbose_name='area of service'),
        ),
        migrations.AddField(
            model_name='requestforservice',
            name='service_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.ServiceType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='provider',
            name='service_types',
            field=models.ManyToManyField(blank=True, to='services.ServiceType', verbose_name='service_types'),
        ),
        migrations.AddField(
            model_name='provider',
            name='team',
            field=models.ManyToManyField(blank=True, related_name='providers', to=settings.AUTH_USER_MODEL, verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='provider',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.ProviderType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='provider',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='managed_providers', to=settings.AUTH_USER_MODEL, verbose_name='Admin'),
        ),
        migrations.AddField(
            model_name='jiraupdaterecord',
            name='provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jira_records', to='services.Provider'),
        ),
        migrations.AddField(
            model_name='jiraupdaterecord',
            name='request_for_service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jira_records', to='services.RequestForService'),
        ),
        migrations.AddField(
            model_name='jiraupdaterecord',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jira_records', to='services.Service'),
        ),
        migrations.AddField(
            model_name='jiraupdaterecord',
            name='superseded_draft',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='services.Service'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='area_of_residence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='services.ServiceArea', verbose_name='Area of residence'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='nationality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='services.Nationality', verbose_name='Nationality'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.Service', verbose_name='Service'),
        ),
        migrations.AddField(
            model_name='contactinformation',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contact_information', to='services.Service', verbose_name='Service'),
        ),
        migrations.AlterUniqueTogether(
            name='jiraupdaterecord',
            unique_together=set([('service', 'update_type')]),
        ),
    ]
